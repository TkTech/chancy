name: Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:

jobs:
  build_ui:
    name: Building UI
    runs-on: "ubuntu-24.04"

    steps:
      - uses: actions/checkout@v4.1.6

      - name: Installing Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Installing dependencies
        working-directory: chancy/plugins/api/ui
        run: npm install

      - name: Building UI
        working-directory: chancy/plugins/api/ui
        run: npm run build

  build:
    name: Running tests.

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: ["ubuntu-24.04", "macos-14", "windows-2022"]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      PGHOST: "localhost"
      PGDATABASE: "postgres"
      PGUSERNAME: "postgres"
      PGPASSWORD: "localtest"

    steps:
      - name: Install PostgreSQL on macOS
        if: runner.os == 'macOS'
        run: |
          brew install postgresql@16
          # --overwrite: Overwrite pre-installed GitHub Actions PostgreSQL binaries
          brew link --overwrite postgresql@16
      - name: Add PostgreSQL binaries to PATH
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "$PGBIN" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "Linux" ]; then
            echo "$(pg_config --bindir)" >> $GITHUB_PATH
          fi
      - name: Start preinstalled PostgreSQL
        shell: bash
        run: |
          echo "Initializing database cluster..."
          
          # Convert backslashes to forward slashes in RUNNER_TEMP for Windows Git Bash
          export PGHOST="${RUNNER_TEMP//\\//}/postgres"
          export PGDATA="$PGHOST/pgdata"
          mkdir -p "$PGDATA"
          
          # initdb requires file for password in non-interactive mode
          export PWFILE="$RUNNER_TEMP/pwfile"
          echo "postgres" > "$PWFILE"
          initdb --pgdata="$PGDATA" --username="postgres" --pwfile="$PWFILE"
          
          echo "Starting PostgreSQL..."
          echo "unix_socket_directories = '$PGHOST'" >> "$PGDATA/postgresql.conf"
          pg_ctl -o "-p 8190" start
          
          echo "Creating user..."
          psql --port 8190 --host "$PGHOST" --username="postgres" --dbname="postgres" --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"
          
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2

      - uses: actions/checkout@v4.1.6

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Installing uv
        run: pip install uv

      - name: Installing dependencies (Python)
        run: uv sync --all-extras

      - name: Running tests
        run: |
          uv run pytest -s -vvvvv --cov=chancy --cov-report=xml

      - name: Uploading coverage
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          slug: TkTech/chancy

      - name: Building docs
        run: |
            cd docs && uv run make clean html